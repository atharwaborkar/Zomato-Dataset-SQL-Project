# Zomato-Dataset-SQL-Project
By using the Zomato Dataset I have solved the Real time Business Problems.

**Firstly Create the database-**
Create database Zomato

**Below query is for using the dataset-**
use Zomato

**Below query is for creating the table as goldusers_signup-**

CREATE TABLE goldusers_signup
(
userid integer,
gold_signup_date VARCHAR(10)
);

**Below query is for Inserting the values into goldusers_signup table-**

INSERT INTO goldusers_signup VALUES 
(1,'22-09-2017'),
(3,'21-04-2017');

**Below query is for Creating the users table-**

CREATE TABLE users
(
userid integer,signup_date VARCHAR(10)
); 

**Below query is for Inserting the values into users table-**

INSERT INTO users VALUES
(1,'09-02-2014'),
(2,'01-15-2015'),
(3,'04-11-2014');

**Below query is for Creating the sales table-**

CREATE TABLE sales(
userid int,
created_date VARCHAR(10),
product_id int
); 

**Below query is for Inserting the values into sales table-**

INSERT INTO sales VALUES 
(1,'04-19-2017',2),
(3,'12-18-2019',1),
(2,'07-20-2020',3),
(1,'10-23-2019',2),
(1,'03-19-2018',3),
(3,'12-20-2016',2),
(1,'11-09-2016',1),
(1,'05-20-2016',3),
(2,'09-24-2017',1),
(1,'03-11-2017',2),
(1,'03-11-2016',1),
(3,'11-10-2016',1),
(3,'12-07-2017',2),
(3,'12-15-2016',2),
(2,'11-08-2017',2),
(2,'09-10-2018',3);

**Below query is for Creating the product table-**

CREATE TABLE product
(
product_id integer,
product_name VARCHAR(30),
price integer
); 

**Below query is for Inserting the values into product table-**

INSERT INTO product
 VALUES
(1,'p1',980),
(2,'p2',870),
(3,'p3',330);

select * from sales;
select * from product;
select * from goldusers_signup;
select * from users;

**1) What is the total amount each customer spent on Zomato?**

select s.userid AS User_Name ,SUM(p.price) AS TOTAL_PRICE from sales s
inner join product p on p.product_id = s.product_id
GROUP BY 1; 

**2) How many days does each customer has visited zomato?**

select userid from users;
select count(created_date) AS TOTAL_DAYS , userid AS USER_ID from sales
GROUP BY userid

**3) What was the first product purched by each customer?**

select u.userid as userid , u.product_id as productid , MIN(u.created_date) AS First_product_purchased_date from sales u
inner join product p on p.product_id = u.product_id
GROUP BY 1;


*Select userid from users*

**4) What is the most purchased items in the menu and how many times was it purchased by all customer?**

*What is the most purchased items in the menu?*

select distinct(product_id) ,MAX(DISTINCT(userid)) from sales

select distinct(userid) ,COUNT(DISTINCT(product_id)) from sales group by 1

select distinct(userid) ,MAX(product_id) from sales

*How many times was it purchased by all customer?*

select userid ,count(product_id) from sales where product_id =
(select top 1 product_id from sales group by product_id order by count(product_id) desc)
group by userid

**5) Which item was the most popular for each customer?**

select rank() over(partition by userid order by cnt desc)
(select userid,product_id,count(product_id) cnt from sales group by userid,product_id)

select t.customer_id, t.product_id, p.product_name
from(
    select customer_id, product_id, 
        rank() over(partition by customer_id order by count(product_id) desc) as rank_p
    from orders
    group by customer_id,product_id
    order by customer_id) as t
left join products p on t.product_id = p.product_id
where rank_p = 1


select u.userid,u.product_id,p.product_id from(
select userid , product_id ,rank() over(partition by userid order by count(product_id) desc) as rank_p
from sales
group by userid,product_id
order by userid) as u
inner join product p on u.product_id = p.product_id 
where rank_p = 1;

**6) Which iten was purched first by the customer and after that they become the Member?**

select userid , created_date ,rank() over(partition by userid order by created_date) as rank_p
(select s.userid , s.created_date , s.product_id , g.gold_signup_date from sales s
inner join goldusers_signup g on s.userid = g.userid) as c

select u.userid,u.created_date from(
select userid , created_date,rank() over(partition by userid order by created_date) as rank_p
from sales
group by userid,created_date,product_id
order by userid) as u
inner join goldusers_signup g on u.userid = g.userid 
where rank_p = 1;

WITH
 first_member_purchase
AS
 (
 SELECT
 s.userid, s.product_id, s.created_date, g.gold_signup_date,
 rank() OVER(PARTITION BY s.userid ORDER BY s.product_id) AS rank_p
 FROM sales s
 INNER JOIN goldusers_signup g ON s.userid = g.userid
 WHERE s.created_date >= g.gold_signup_date 
 )
SELECT userid, product_name, created_date
FROM first_member_purchase fmp
INNER JOIN product p ON fmp.product_id = p.product_id
WHERE rank_p = 1
ORDER BY userid;

**7) Which item was purchased just before the customer became a member?**

WITH
 first_member_purchase
AS
 (
 SELECT
 s.userid, s.product_id, s.created_date, g.gold_signup_date,
 rank() OVER(PARTITION BY s.userid ORDER BY s.product_id) AS rank_p
 FROM sales s
 INNER JOIN goldusers_signup g ON s.userid = g.userid
 WHERE s.created_date <= g.gold_signup_date 
 )
SELECT userid, product_name, created_date
FROM first_member_purchase fmp
INNER JOIN product p ON fmp.product_id = p.product_id
WHERE rank_p = 1
ORDER BY userid;

**8) What is the total items and amount spent for each member before they became a member?**

select s.userid , sum(p.price) from sales s
inner join sales s on p.product_id = s.product_id
inner join users u on s.userid = u.userid
WHERE s.created_date <= u.signup_date 
GROUP BY userid
order by userid

trying by another method below = 

select userid , COUNT(product_id) from sales group by 1

select s.userid , count(s.product_id) , SUM(p.price) , created_date from sales s
inner join product p on s.product_id = p.product_id
inner join users u on s.userid = u.userid  
where signup_date < created_date
group by userid
order by userid

**9) If each $1 spent equates to 10 points and sushi has a 2x points multiplier — how many points would each customer have?**

Let’s breakdown the question.

1) Each $1 spent = 10 points.
2) But, sushi (product_id 1) gets 2x points, meaning each $1 spent = 20 points So, we use CASE WHEN to create conditional statements
3) If product_id = 1, then every $1 price multiply by 20 points
4) All other product_id that is not 1, multiply $1 by 10 points Using price_points, SUM the points.   
   
select (product_id*1) AS productid,(product_id*20) AS total_points from product

WITH
 total_points
AS
 (
SELECT *, CASE when product_id = 1 then price * 20
ELSE price * 10
END AS points
FROM product
)
select s.userid , sum(p.points) from total_points as p
inner join sales s on p.product_id = s.product_id
group by userid

